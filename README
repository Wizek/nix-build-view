# motivation

this is an interactive showcase how nix-build could be extended for better usability

1. type 'make'
2. run './demo'

or 

on a linux shell do:
 
    cat preview

or look at this screenshot:

   https://raw.github.com/qknight/nix-build-hack/master/screenshot1.jpeg
   https://raw.github.com/qknight/nix-build-hack/master/screenshot2.jpeg

# todo

what to print to the statusline?
 - DerivationGoal 
   could print the current status it is in: fetching|buildPhase|installPhase|... and it could
   pass a logfile, which one can attach to with 'tail -f /tmp/9brfbp9gk7x3qim52q49rckhw7vw08h2-asciidoc-8.6.8/buildlog' 
   /nix/store/9brfbp9gk7x3qim52q49rckhw7vw08h2-asciidoc-8.6.8.drv [buildPhase] since 5min 20sec ETA: ~ 20min
     log: /tmp/9brfbp9gk7x3qim52q49rckhw7vw08h2-asciidoc-8.6.8/buildlog
 - SubstitutionGoal
   download progress while downloading | extracting stuff

* design phase

    * [done] design a multiline prototype -> see demo.cpp
    * [done] disable keyboard echo

      http://stackoverflow.com/questions/4963421/vt-terminal-disable-local-editing-and-echo

    * [done] make the widgets resizeable - signal 28
    
    * after program execution all the keystrokes are written to the shell, these should be filtered instead!
    * printf + cout wrapper to write above the statusline
    * single line 'compact mode' prototype (wanted by eelco)
    * create shortcuts which can affect the console rendering verbosity

        * 'v' switch between verbose and compact mode (single line vs multiline)


    * when 3 widgets are rendered (without line-wrapping) resizing works as expected, however, if a widget exceeded the linewidth, then
      the clearStatus call does not remove the correct ammount of lines and leaves unwanted stuff

        * a fix would be to compute how many linewraps resulted from the resize: previous widget-width / new linewidth = 2,173 means we have to remove 
          3 lines now, instead of just one for example

    * add regexp autocolor feature

* look at: 'nixos-rebuild build -Q', why does it look so nice?

* find out what features i can do:

    * total download size known?
    * bandwidth per download known?
    * summary of all download bandwidths known?

* find out how downloads are started when doing 'nixos-rebuild switch' -> nix-build 

* what drives the main loop in 'nix-build'
  nix-store binary (nix-store.c) calls void run(..) -> opRealise(..) -> store->buildPaths(..) -> (build.cc) -> void Worker::run(const Goals & _topGoals) is the main loop!

* find a nice output wrapper, preferably a singleton which wraps printMsg() somehow

    * how does nix-build write to the shell
    
        it uses libutil/util.cc's:
        printMsg() -> printMsg_() -> writeToStderr(s) -> _writeToStderr() -> defaultWriteToStderr(..) -> writeFull(..) -> write(..)

    * how to integrate the WINCH (signal 28) terminal signal which is thrown on console resize?

        probably using a FD which the sinal handler writes to

    * [done] how to extend ./scripts/download-from-binary-cache.pl.in to get a periodict download status update?

        https://metacpan.org/source/SYP/Net-Curl-0.33/lib/Net/Curl/Easy.pm#L14

        see both:

            * https://raw.github.com/qknight/nix-build-hack/master/www_curl_easy.pl
            * https://raw.github.com/qknight/nix-build-hack/master/net_curl_easy.pl




